class Solution {
public:
    long long int retnum(vector<int>A){
        int n=A.size();
        if(n==0){
    return 0;}
        long long int dp[n];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<n;i++){
            dp[i]+=1;
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(A[j]<A[i]&&dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                }
            }
        }
        return *max_element(dp,dp+n);
    }
    long long int findNumberOfLIS(vector<int>& nums) {
       long long int c=retnum(nums);
        int n=nums.size();
        vector< pair<long long,long long > >A (nums.size());
        for(int i=0;i<A.size();i++){
            A[i].first=1;
            A[i].second=1;
        }
        long long b=0;
            for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]&&A[i].first<A[j].first+1){
                    A[i].first=A[j].first+1;
                    A[i].second=A[j].second;
                    
                }
                else if(nums[j]<nums[i]&&A[i].first==A[j].first+1){
                    A[i].second+=A[j].second;
                }
            }
        }
        for(int i=0;i<n;i++){
            cout<<A[i].first<<" "<<A[i].second<<" ";
        }
        long long sum=0;
        for(int i=0;i<n;i++){
            if(A[i].first==c){
                sum=sum+A[i].second;
            }
        }
        cout<<endl;
        return sum;
    }
};

