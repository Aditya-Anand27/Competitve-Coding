class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        if(n==0&&m==0){
            return 0;
        }
        if(n==0){
            return m;
            
        }
        if(m==0){
return n;}
        int dp[n+1][m+1];
        memset(dp,0,sizeof(dp));
        dp[0][0]=0;
        dp[1][0]=1;
        dp[0][1]=1;
        for(int i=0;i<=n;i++){
for(int j=0;j<=m;j++){
    if(i==0||j==0){
        dp[i][j]=abs(i-j);
    }
    else if(word1[i-1]==word2[j-1]){
        dp[i][j]=dp[i-1][j-1];
    }
    else
    dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;
}}      
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }
        return dp[n][m];
        
    }
};